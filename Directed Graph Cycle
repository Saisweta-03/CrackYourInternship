class Solution {
    // Function to detect cycle in a directed graph.
    public boolean isCyclic(int V, ArrayList<ArrayList<Integer>> adj) {
        // code here
        boolean[] visited = new boolean[V];
       Set<Integer> in = new HashSet<>(V);
       for(int i=0; i<V; i++) {
           if(!visited[i] && isCycle(visited, adj, in, i)) return true;
       }
       return false;
   }
   boolean isCycle(boolean[] visited,
                   ArrayList<ArrayList<Integer>> adj,
                   Set<Integer> in,
                   int index) {
       visited[index] = true;
       in.add(index);
       ArrayList<Integer> list = adj.get(index);
       for (int i=0; i<list.size(); i++) {
           int val = list.get(i);
           if(in.contains(val)) return true;
           if(!visited[val] && isCycle(visited, adj, in, val)) return true;
       }
       in.remove(index);
       return false;
    }
}
