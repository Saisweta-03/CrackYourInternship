class Solution {
    public int reversePairs(int[] nums) {
        if (nums == null || nums.length == 0){
            return 0;
        }
        return mergeSortAndCount(nums, 0 ,nums.length-1);
    }
    private int mergeSortAndCount(int[] nums,int left,int right){
        if (left>=right){
            return 0;
        }
        int mid = left + (right-left)/2;
        int count = mergeSortAndCount(nums,left,mid) + mergeSortAndCount(nums,mid+1,right);
        count += countWhileMerging(nums,left,mid,right);
        return count;
    }
    private int countWhileMerging(int[] nums, int left , int mid , int right){
        int count = 0;
        int j = mid+1;
        for ( int i = left ; i<= mid ; i++){
            while (j<= right && nums[i]>(2*(long)nums[j])){
                j++;
            }
            count+= j-(mid+1);
        }
        List<Integer> list = new ArrayList<>();
        int i = left ;
        j=mid+1;
        while (i<=mid && j<=right){
            if (nums[i] < nums[j]){
                list.add(nums[i++]);
            }
            else {
                list.add(nums[j++]);
            }
        }
        while (i<=mid){
            list.add(nums[i++]);
        }
        while (j<=right){
            list.add(nums[j++]);
        }
        for (i = left ; i<=right; i++){
            nums[i] = list.get(i-left);
        }
        return count;
    }
    
}
