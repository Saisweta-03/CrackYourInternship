class Solution {
    public List<List<Integer>> verticalTraversal(TreeNode root) {
        
        // column Positions: row Positions: Values
        HashMap<Integer, HashMap<Integer, List<Integer>>> groups = new HashMap();
        List<List<Integer>> output = new ArrayList<>();
        
        int[] minMaxBounds = new int[]{0, 0, 0}; // minCol, maxCol, maxRow
        populateDepthMap(groups, root, 0, 0, minMaxBounds);
        
        // Preprocessing Completed ! 
    
        int minCol = minMaxBounds[0], maxCol = minMaxBounds[1], maxRow = minMaxBounds[2];
        
        for(int c = minCol; c <= maxCol; c++){
            List<Integer> columnList = new ArrayList<>();
            
            for(int r = 0; r <= maxRow; r++){
                if(groups.get(c).containsKey(r)){
                    List<Integer> currColRow = groups.get(c).get(r);
                    
                    if(!currColRow.isEmpty()){
                         // Sort values that have the same row and the same column 
                        Collections.sort(currColRow);
                        columnList.addAll(currColRow);
                    }
                }
            }
            output.add(columnList);
        }
        return output;
    }
    
    public void populateDepthMap(
        HashMap<Integer, HashMap<Integer, List<Integer>>> groups,
        TreeNode root, 
        int colval,
        int level, 
        int[] minMaxBounds
    ){
        if(root == null) return;
        
        /* There are 3 cases for every new values: 
         *  1) Column isn't present -- Add (Col, Row, (root.val))
         *  2) Row isn't present -- Add (Row, (root.val))
         *  3) Both are present -- Add (root.val)
         */ 
        if(!groups.containsKey(colval)){
            HashMap<Integer, List<Integer>> colms = new HashMap();
            colms.put(level, new ArrayList(Arrays.asList(root.val)));
            groups.put(colval, colms);
        }
        else if(!groups.get(colval).containsKey(level)){
            groups.get(colval).put(level, new ArrayList(Arrays.asList(root.val)));
        } 
        else groups.get(colval).get(level).add(root.val);
            
        // Update our bounds for min/max column and max row
        if(colval < minMaxBounds[0]) minMaxBounds[0] = colval;
        if(colval > minMaxBounds[1]) minMaxBounds[1] = colval;
        if(level > minMaxBounds[2]) minMaxBounds[2] = level;
            
        populateDepthMap(groups, root.left, colval - 1, level + 1, minMaxBounds);
        populateDepthMap(groups, root.right, colval + 1, level + 1, minMaxBounds);
    }
}
