class Solution {
    public ListNode reverseBetween(ListNode head, int left, int right) {
        if(left==0 && right == 0 || left==right){
            return head;
        }
        else if(head==null){
            return head;
        }
        ListNode temp = head;
        List<Integer> ll1 = new ArrayList<>();
        List<Integer> ll2 = new ArrayList<>();
        List<Integer> ll3 = new ArrayList<>();
        int count = 0;
        while(temp!=null){
            count++;
            if(count<left){
                ll1.add(temp.val);
            }
            if(count>=left && count<=right){
                ll2.add(temp.val);
            }
            if(count>right){
                ll3.add(temp.val);
            }
            temp = temp.next;
        }
        Collections.reverse(ll2);
        int flag = 0;
        if(ll1.size()==0){
            flag = 1;
        }

        if(flag==0){
            for(int i=0;i<ll1.size();i++){
                ListNode newnode = new ListNode(ll1.get(i));
                if(i==0){
                    head = temp = newnode;
                }
                else{
                    temp.next = newnode;
                    temp = temp.next;
                }
            }
        }
        

        for(int j=0;j<ll2.size();j++){
            ListNode newnode = new ListNode(ll2.get(j));
            if(flag==1 && j==0){
                head = temp = newnode;
            }
            else{
                temp.next = newnode;
                temp = temp.next;
            }
            
        }

        for(int k=0;k<ll3.size();k++){
            ListNode newnode = new ListNode(ll3.get(k));

            temp.next = newnode;
            temp = temp.next;

        }

        return head;

    }
}
