class Solution {
    // Function to return a list containing the DFS traversal of the graph.
    public ArrayList<Integer> dfsOfGraph(int V, ArrayList<ArrayList<Integer>> adj) {
         boolean[] visited = new boolean[V]; // Track visited vertices
        ArrayList<Integer> result = new ArrayList<>(); // To store the DFS traversal
        
        // Start DFS traversal from vertex 0 (or any specified start vertex)
        dfs(0, visited, adj, result);
        
        return result;
    }
    private  void dfs(int node, boolean[] visited, ArrayList<ArrayList<Integer>> adj, ArrayList<Integer> result) {
        // Mark the current node as visited and add to result
        visited[node] = true;
        result.add(node);
        
        // Recur for all the adjacent vertices
        for (int neighbor : adj.get(node)) {
            if (!visited[neighbor]) {
                dfs(neighbor, visited, adj, result);
            }
        }
        // Code here
    }
}
