class Pair{
   int node;
   int parent;
   Pair(int node , int parent)
   {
       this.node = node;
       this.parent = parent;
   }
}
class Solution {
    // Function to detect cycle in an undirected graph.
    public boolean isCycle(int V, ArrayList<ArrayList<Integer>> adj){
        // Code here
        boolean vis[] = new boolean[V+1];
        for(int i = 0; i <V; i++){
            if(vis[i] == false){
                if(dfs(adj,vis,i,-1) == true) return true;
            }
        }
        return false;
    }
    
    boolean dfs(ArrayList<ArrayList<Integer>> adj,boolean[] vis, int start, int parent){
        vis[start] = true;
        for(Integer node : adj.get(start)){
            if(vis[node] == false){
                if(dfs(adj,vis,node,start) == true) return true;
                
            }else if(node != parent){
                return true;
            }
        }
        
        return false;
   }
}
