class Solution {
    static ArrayList<ArrayList<Integer>> uniquePerms(ArrayList<Integer> arr , int n) {
        // code here
        ArrayList<ArrayList<Integer>> result = new ArrayList<>();
        Collections.sort(arr);
        boolean[] used = new boolean[n];
        backTrack(arr,new ArrayList<>() , result , used);
        return result;
    }
    private static void backTrack(ArrayList<Integer> arr , ArrayList<Integer> tempList , ArrayList<ArrayList<Integer>> result ,boolean[] used){
        if (tempList.size() == arr.size()){
            result.add(new ArrayList<>(tempList));
        }
        else {
            for (int i=0 ; i<arr.size() ; i++){
            if (used[i] || (i>0 && arr.get(i) == arr.get(i-1) && !used[i-1])){
                continue;
            }
            used[i] = true;
            tempList.add(arr.get(i));
            backTrack(arr,tempList , result , used);
            used[i] = false;
            tempList.remove(tempList.size()-1);
            }
        }
    }
}
